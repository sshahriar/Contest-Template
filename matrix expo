struct data {
    // define the length 
    // y = ( [ matrix ]^k ) ) * [next state matrix] *
    unsigned long long arr[5][5 ] ;
    data() {  
        repi(i , 3) repi(j , 3)  arr[i][j] = 0; 
     }
    void operator=(data x) {
        repi(i,N ) repi(j  , N)
                    this->arr[i][j] = x.arr[i][j] ;
    }
    void init( ull p  , ull q ) {

        arr[1][1] = p; arr[1][2] = -q ; 
        arr[2][1] = (ull)1 ; arr[2][2] = (ull) 0  ;
       // arr[2][0] = 0; arr[2][1] = 0; arr[2][2] =  p   ;

    }
    void trace() {
        repi(i , 2 ) {
            repi (j,2 ) {
                cout << arr[i][j] << " " ;

            }
            cout<< endl;
        }
        cout << endl; 
    }

} ;

data multiply(data x, data y ) {
    data z ;

    repi(i, N ) repi(j, N ) repi(k , N )
        z.arr[i][j] = (z.arr[i][j] + (x.arr[i][k]*y.arr[k][j])  ) ;
    return z ;
}

data expo(data A  ,int  n ) {
  //  dbg(n ) ;
    if(n == 1 ) return A ; 
    else if(!(n &1) ) { 
        data B =  expo(A , n/2) ;
        return multiply(B ,B) ;  

    } else { 

        return multiply(A , expo( A ,n-1 ) ) ; 


    }
} 
