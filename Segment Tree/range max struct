struct  Data{ 
    // clear array   important ... 
    int tree[maxn*4 ] = {} , lazy[maxn*4]   = {}   ; 

    Data() {
       
    } ;

    void push(int id ,int l, int r  ) {
        tree[id] += lazy[id ]   ; 
        if(l!=r  ) {    
            lazy[id*2] +=  lazy[id] ;
            lazy[id*2+1] += lazy[id]  ;
        }
        lazy[id] = 0 ; 
    } 
    void upd(int id ,int l , int r, int s ,int e , int val )  {
        push(id , l,r)  ; 
        if(l>e or  r<s )  return  ; 
        if(l>=  s and r <=e ) {
            lazy[id]+= val ;
            push(id ,   l, r ) ; 
            return ; 
        }
        int mid = (l+r)/2 ,  lf = id*2 ; 

        upd(lf,  l, mid, s, e ,val )  ; 
        upd(lf+1, mid+1, r , s,e ,val  ) ; 
        tree[id ]  = max(tree[lf]  , tree[ lf+1   ]) ; 
    }
    int query(int id ,int l , int r, int s,int e )  {
        push(id , l,r)  ; 
        if(l>e or  r<s )  return -inf  ; 
        if(l>=  s and r <=e ) {
            return tree[ id  ]   ; 
        }
        int mid = (l+r)/2 ,  lf = id*2 ; 

        return max( query(lf,  l, mid, s, e  ) , query(lf+1, mid+1, r , s,e ) )  ;      
    }
} ;
